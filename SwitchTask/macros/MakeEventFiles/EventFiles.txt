Option Explicit

Private rowCount As Integer
Private bCorrEvent As Boolean
Private bPresCorrEvent As Boolean
Private Const finalDataSheet = "FinalData"
Private Const behavDataSheet = "BehavData"

' overall constants used in program
Private Const defaultSillyNumber = -47 ' if this appears in output then something's not working
Private Const minRowCount = 1
Private Const maxRowCount = 600
Private Const feedPicEvent = "feedPicRate"
Private Const feedPresEvent = "feedPresNum"

' column numbers
Private Const dataColFeedRating = 9 ' column I on sheet
Private Const feedbackColRating = "I"
Private Const dataColStimOn = 10 ' column J on sheet
Private Const stimOnCol = "J"
Private Const dataColRespTime = 11 ' column K on sheet
Private Const respTimeCol = "K"

Private Const outColFeedbackOnset = 14 ' column N on sheet
Private Const outColFeedbackDuration = 15 ' column O on sheet
Private Const outColRun = 16  ' column P on sheet
Private Const outColFacePres = 31 ' column AE on sheet
Private Const feedbackColOnset = "N"
Private Const feedbackColDuration = "O"
Private Const feedbackColFacePres = "AE"
Private Const startRowToStoreLatency = 35

'Private Const outColNewSetSwitch = 23 ' column W on sheet
Private Const outColEvents = 24 ' column X on sheet
Private Const outColFeedEvents = 25 ' column Y on sheet

Private Const outColStimOnset = 26 ' column Z on sheet
Private Const outColStimDuration = 27 ' column AA on sheet
Private Const stimuliColOnset = "Z"
Private Const stimuliColDuration = "AA"

Private Const outColStimEvent = 28 ' column AB on sheet
Private Const outColPrbErrCritEvent = 29 ' column AC on sheet
Private Const outColAllEvents = 30 ' column AD on sheet
Private Const outColRedefinedEvents = 32 ' column AF on sheet
Private Const outColFaceCorrEvents = 33 ' column AG on sheet

Private bModelOnFeedback As Boolean
Private bModelOnStimulus As Boolean

Private Const fullRangeOfData = "A:AG"

Private Const mainOutputFolder = "textFiles"


Public Sub calcLatencies()
'' this subroutine is only used as a fudge to make sure that the
'' latency data is captured per event.  it's being run post-hoc
'' so it implicitly assumes that createEventTextFiles has been run

    bModelOnFeedback = False
    bModelOnStimulus = True

    Call sortColumns(outColRedefinedEvents, "AF1")
    Call calcEventLatencies(outColRedefinedEvents, dataColStimOn, dataColRespTime)

End Sub


Public Sub createEventTextFiles()
    Dim bDoFaceRatingEvents As Boolean
    Dim bDoSwitchTaskEvents As Boolean
    
    ' just to toggle manually
    bDoSwitchTaskEvents = True
    bDoFaceRatingEvents = False
    
    bModelOnFeedback = False
    bModelOnStimulus = True
    
    Worksheets(finalDataSheet).Activate
    bCorrEvent = False
    bPresCorrEvent = False
    If bDoSwitchTaskEvents Then
        ' For PosNeg Events
        Call sortColumns(outColFeedEvents, "Y1")
        Call writeToTextFiles(outColFeedEvents, feedbackColOnset, feedbackColDuration)
        ' For SwitchEvents
        Call sortColumns(outColRedefinedEvents, "AF1")
        If bModelOnFeedback Then Call writeToTextFiles(outColRedefinedEvents, feedbackColOnset, feedbackColDuration)
        If bModelOnStimulus Then Call writeToTextFiles(outColRedefinedEvents, stimuliColOnset, stimuliColDuration)
        ' For the 'original' correlation with face ratings
        bCorrEvent = True
        Call sortColumns(outColRun, "P1")
        Call writeToTextFiles(outColRun, feedbackColOnset, feedbackColDuration)
        bCorrEvent = False
    End If
    If bDoFaceRatingEvents Then
'        ' For the 'original' correlation with face ratings
'        bCorrEvent = True
'        Call sortColumns(outColRun, "P1")
'        Call writeToTextFiles(outColRun, feedbackColOnset, feedbackColDuration)
        bCorrEvent = False
        ' for the correlation using only the 1st presentation of faces
        bPresCorrEvent = True
        Call sortColumns(outColFaceCorrEvents, "AG1")
        Call writeToTextFiles(outColFaceCorrEvents, feedbackColOnset, feedbackColDuration)
        bPresCorrEvent = False
    End If
End Sub


Private Sub sortColumns(whichColumn As Integer, columnName As String)
    'Dim columnName As String
    Dim otherColumn As String
    
    
    If bModelOnStimulus Then
        If columnName = "Y1" Then
            otherColumn = feedbackColOnset & 1
        Else
            otherColumn = stimuliColOnset & 1
        End If
    Else
        If columnName = "AB1" Then
            otherColumn = stimuliColOnset & 1
        Else
            otherColumn = feedbackColOnset & 1 ' default
        End If
    End If
            
    Columns(fullRangeOfData).Select
    Selection.Sort Key1:=Range(columnName), Order1:=xlAscending, Key2:=Range(otherColumn) _
        , Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:= _
        False, Orientation:=xlTopToBottom

    'Columns("A:AJ").Select
    '    Selection.Sort Key1:=Range("AA1"), Order1:=xlAscending, Key2:=Range("N1") _
        , Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:= _
        False, Orientation:=xlTopToBottom, 'DataOption1:=xlSortNormal, DataOption2 _
        :=xlSortNormal
End Sub

Private Sub writeToTextFiles(eventCol As Integer, colOnset As String, colDuration As String)
    Dim prevRowForOutput As Integer
    Dim adjustedRowCount As Integer
    Dim currentEvent As String
    Dim nextEvent As String
    Dim eventToPass As String

    prevRowForOutput = 0
    For rowCount = minRowCount To maxRowCount
        currentEvent = Cells(rowCount, eventCol).Value
        nextEvent = Cells(rowCount + 1, eventCol).Value
        
        If currentEvent <> nextEvent Then
            If bCorrEvent Then
                ' run specific stuff relevant to feedbackCorr trials
                eventToPass = "r" & currentEvent & "_" & feedPicEvent
                Call writeFile(rowCount, prevRowForOutput + 1, eventToPass, feedbackColRating)
                eventToPass = "r" & currentEvent & "_" & feedPresEvent
                Call writeFile(rowCount, prevRowForOutput + 1, eventToPass, feedbackColFacePres)
                currentEvent = "r" & currentEvent & "_" & "facePresByRun"
            End If
            If bPresCorrEvent Then
                Call writeFile(rowCount, prevRowForOutput + 1, currentEvent, feedbackColRating)
            End If
            Call writeFile(rowCount, prevRowForOutput + 1, currentEvent, colOnset)
            Call writeFile(rowCount, prevRowForOutput + 1, currentEvent, colDuration)
            prevRowForOutput = rowCount
        End If
    Next rowCount
End Sub

Private Sub writeFile(lastRow As Integer, firstRow As Integer, eventName As String, outCol As String)
    Dim startRange As String
    Dim endRange As String
    Dim totalRange As String
    Dim textFileName As String
    Dim newOutDir As String
    
    startRange = outCol & firstRow
    endRange = outCol & lastRow
    totalRange = startRange & ":" & endRange ' note that this is still just one column
    
    If outCol = feedbackColOnset Or outCol = stimuliColOnset Then
        textFileName = "on_" & eventName
    ElseIf outCol = feedbackColDuration Or outCol = stimuliColDuration Then
        textFileName = "dur_" & eventName
    ElseIf outCol = feedbackColRating Then
        textFileName = "rate_" & eventName
    ElseIf outCol = feedbackColFacePres Then
        textFileName = "pres_" & eventName
    Else
        ' to catch if it's not one of the above
        ' This shouldn't happen but should be bloody obvious if it does
        textFileName = "unknownType_" & eventName
    End If
    
    
    '' In the following section, change the colons to a backslashs when using PC
    '' (the mac version of Excel VBA used to use colons)
    newOutDir = ThisWorkbook.Path & "\" & mainOutputFolder & "\" & "W" & Left(ActiveWorkbook.Name, 6)
    Range(totalRange).Select
    Selection.Copy
    Workbooks.Add
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    If Not bCheckFolderExists(newOutDir) Then MkDir newOutDir
    ActiveWorkbook.SaveAs Filename:= _
        newOutDir & "\" & textFileName & ".txt" _
        , FileFormat:=xlText, CreateBackup:=False

'        "Tiger:Users:Amir:Amir's Stuff: Work: Tasks:AffSwitchTask: ScannerTask:Calculations:textFiles:" & textFileName & ".txt" _
        , FileFormat:=xlText, CreateBackup:=False
    
    'ActiveWindow.Close
    ActiveWorkbook.Close False

End Sub


Private Sub calcEventLatencies(eventCol As Integer, colStimOn As Integer, colRespTime As Integer)
    Dim prevRowForOutput As Integer
    Dim adjustedRowCount As Integer
    Dim currentEvent As String
    Dim nextEvent As String
    Dim dblSumOfRespTimes As Double
    Dim dblSumOfStimOnTime As Double
    Dim dblAveLatency As Double
    Dim outputRow As Integer
    'Dim eventToPass As String
    
    outputRow = startRowToStoreLatency

    prevRowForOutput = 0
    For rowCount = minRowCount To maxRowCount
        currentEvent = Cells(rowCount, eventCol).Value
        nextEvent = Cells(rowCount + 1, eventCol).Value
        
        If currentEvent <> nextEvent Then
            
            dblSumOfRespTimes = Application.WorksheetFunction.Sum(Range(respTimeCol & prevRowForOutput + 1 & ":" & respTimeCol & rowCount))
            dblSumOfStimOnTime = Application.WorksheetFunction.Sum(Range(stimOnCol & prevRowForOutput + 1 & ":" & stimOnCol & rowCount))
            dblAveLatency = (dblSumOfRespTimes - dblSumOfStimOnTime) / (rowCount - prevRowForOutput)
            
            Sheets(behavDataSheet).Cells(outputRow, 2).Value = currentEvent
            Sheets(behavDataSheet).Cells(outputRow, 3).Value = dblAveLatency
            
            prevRowForOutput = rowCount
            outputRow = outputRow + 1
        End If
    Next rowCount
End Sub



Private Function bCheckFolderExists(strPath As String) As Boolean
    On Error Resume Next
    Err.Clear
    ChDir strPath
    If Err.Number = 0 Then bCheckFolderExists = True
End Function
